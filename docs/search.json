[{"path":[]},{"path":"https://docs.ropensci.org/nodbi/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"CONTRIBUTING","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://docs.ropensci.org/nodbi/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"CONTRIBUTING","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://docs.ropensci.org/nodbi/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"CONTRIBUTING","text":"recommend create Git branch pull request (PR). Look Travis AppVeyor build status making changes. README contain badges continuous integration services used package. style tips developer guide use roxygen2. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://docs.ropensci.org/nodbi/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"CONTRIBUTING","text":"Please note nodbi project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/nodbi/CONTRIBUTING.html","id":"discussion-forum","dir":"","previous_headings":"","what":"Discussion forum","title":"CONTRIBUTING","text":"Check discussion forum think issue requires longer form discussion.","code":""},{"path":"https://docs.ropensci.org/nodbi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 nodbi authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/nodbi/articles/nodbi-overview.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"nodbi - package overview","text":"R package nodbi provides single interface several NoSQL databases SQL databases JSON functionality, function parameters return values across : MongoDB SQLite PostgreSQL DuckDB Elasticsearch CouchDB Package nodbi designed use specific SQL functions database may JSON added functionality tested performance enable switching databases without changing user code.","code":"library(nodbi)"},{"path":[]},{"path":"https://docs.ropensci.org/nodbi/articles/nodbi-overview.html","id":"connect","dir":"Articles","previous_headings":"Functionality","what":"Connect","title":"nodbi - package overview","text":"First, connection database opened. example, additional parameters used database file server; see help page respective database. “Container” used term indicate conceptually database holds data (e.g. collection MongoDB, table DuckDB). key parameter nodbi functions holds name relevant container.","code":"# name of container key <- \"my_container\"  # nodbi can connect any of these databases if (FALSE) {   src <- src_duckdb()   src <- src_mongo(collection = key)   src <- src_sqlite()   src <- src_postgres()   src <- src_elastic()   src <- src_couchdb(     user = Sys.getenv(\"COUCHDB_TEST_USER\"),     pwd = Sys.getenv(\"COUCHDB_TEST_PWD\")   ) }  # this example is run with src <- src_sqlite()  # note additional parameters can be specified, # for example for local or remote MongoDb: help(\"src_mongo\")"},{"path":"https://docs.ropensci.org/nodbi/articles/nodbi-overview.html","id":"docdb_create","dir":"Articles","previous_headings":"Functionality","what":"docdb_create","title":"nodbi - package overview","text":"Create container yet exist fill value. return value number created documents. “Documents” refers rows data frame mtcars, number NDJSON lines, number list items, number objects JSON array. parameter value nodbi function can take data frame, list, JSON string, file name URL pointing NDJSON. Check list containers exist database:","code":"# check if container already exists docdb_exists(src = src, key = key) #> [1] FALSE  # load data from a data frame with row names into # the container specified in \"key\" parameter docdb_create(src = src, key = key, value = mtcars) #> [1] 32  # do not run during testing if (FALSE) {   # load additionally 98 NDJSON records   docdb_create(src, key, \"https://httpbin.org/stream/98\") }  # load additionally mapdata as list docdb_create(src, key, jsonlite::fromJSON(mapdata, simplifyVector = FALSE)) #> Note: container 'my_container' already exists #> [1] 2  # show JSON structure of contacts jsonlite::minify(contacts) #> [{\"_id\":\"5cd67853f841025e65ce0ce2\",\"isActive\":false,\"balance\":\"$3,808.45\",\"age\":23,\"eyeColor\":\"green\",\"name\":\"Lacy Chen\",\"email\":\"lacychen@conjurica.com\",\"about\":\"Sunt consequat ad dolore.\\nExercitation nisi reprehenderit.\",\"registered\":\"2014-08-03T12:11:54 -02:00\",\"tags\":[\"nulla\",\"nisi\",\"adipisicing\",\"do\",\"ad\",\"ullamco\",\"irure\"],\"friends\":[{\"id\":0,\"name\":\"Wooten Goodwin\"},{\"id\":1,\"name\":\"Brandie Woodward\"},{\"id\":2,\"name\":\"Angelique Britt\"}]},{\"_id\":\"5cd678531b423d5f04cfb0a1\",\"isActive\":false,\"balance\":\"$3,400.50\",\"age\":20,\"eyeColor\":\"brown\",\"name\":\"Rae Colon\",\"email\":\"raecolon@conjurica.com\",\"about\":\"Nisi excepteur duis duis aliquip qui id consequat consequat.\",\"registered\":\"2018-12-19T06:23:35 -01:00\",\"tags\":[\"nostrud\",\"eu\",\"consectetur\",\"adipisicing\",\"labore\",\"ut\",\"voluptate\"],\"friends\":[{\"id\":0,\"name\":\"Yang Yates\"},{\"id\":1,\"name\":\"Lacy Chen\"}]},{\"_id\":\"5cd6785335b63cb19dfa8347\",\"isActive\":false,\"balance\":\"$2,579.09\",\"age\":30,\"eyeColor\":\"brown\",\"name\":\"Williamson French\",\"email\":\"williamsonfrench@conjurica.com\",\"about\":\"Nulla do sunt consectetur officia. Laboris pariatur incididunt.\",\"registered\":\"2018-02-14T10:59:57 -01:00\",\"tags\":[\"exercitation\",\"do\",\"magna\",\"ut\",\"consectetur\",\"ex\",\"incididunt\"],\"friends\":[{\"id\":0,\"name\":\"Coleen Dunn\"},{\"id\":1,\"name\":\"Doris Phillips\"},{\"id\":2,\"name\":\"Concetta Turner\"}]},{\"_id\":\"5cd6785325ce3a94dfc54096\",\"isActive\":true,\"balance\":\"$1,161.52\",\"age\":22,\"eyeColor\":\"brown\",\"name\":\"Pace Bell\",\"email\":\"pacebell@conjurica.com\",\"about\":\"Eiusmod sunt laborum ipsum do cupidatat qui id dolore do.\",\"registered\":\"2018-08-17T12:23:42 -02:00\",\"tags\":[\"aliqua\",\"consectetur\",\"commodo\",\"velit\",\"cupidatat\",\"duis\",\"dolore\"],\"friends\":[{\"id\":0,\"name\":\"Baird Keller\"},{\"id\":1,\"name\":\"Francesca Reese\"},{\"id\":2,\"name\":\"Dona Bartlett\"}]},{\"_id\":\"5cd678530df22d3625ed8375\",\"isActive\":true,\"balance\":\"$2,412.67\",\"age\":20,\"eyeColor\":\"blue\",\"name\":\"Krista Baxter\",\"email\":\"kristabaxter@conjurica.com\",\"about\":\"Sint quis nulla ea fugiat. Commodo nisi qui eu sit.\",\"registered\":\"2017-07-19T05:03:47 -02:00\",\"tags\":[\"sit\",\"cillum\",\"commodo\",\"labore\",\"sint\",\"in\",\"exercitation\"],\"friends\":[{\"id\":0,\"name\":\"Pace Bell\"}]}]  # load additionally contacts JSON data docdb_create(src, key, contacts) #> Note: container 'my_container' already exists #> [1] 5 docdb_list(src = src) #> [1] \"my_container\""},{"path":"https://docs.ropensci.org/nodbi/articles/nodbi-overview.html","id":"identifiers","dir":"Articles","previous_headings":"Functionality","what":"Identifiers","title":"nodbi - package overview","text":"unique document identifier _id, corresponding primary index constraint unique SQL databases. _id’s input value either row names data frame (mtcars) top-level elements name _id contacts shown just . Thus, expect warning trying create documents _id’s already exist container. return value can 0 documents newly created, number subset documents value yet exist newly created. updating existing documents, see function docdb_update().","code":"# zero new documents created docdb_create(src, key, value = mtcars) #> Note: container 'my_container' already exists #> Warning: Could not create some documents, reason: UNIQUE constraint failed #> [1] 0"},{"path":"https://docs.ropensci.org/nodbi/articles/nodbi-overview.html","id":"docdb_get","dir":"Articles","previous_headings":"Functionality","what":"docdb_get","title":"nodbi - package overview","text":"documents container can now retrieved docdb_get().","code":"# use library for more # readable print output if (require(tibble)) {      # get all documents, irrespective of schema   as_tibble(docdb_get(src, key))      # get just 2 documents using limit and note that   # only fields for these documents are returned   as_tibble(docdb_get(src, key, limit = 2L))    } #> Loading required package: tibble #> # A tibble: 2 × 11 #>   `_id`       isActive balance   age eyeColor name  email about registered tags  #>   <chr>       <lgl>    <chr>   <int> <chr>    <chr> <chr> <chr> <chr>      <lis> #> 1 5cd678530d… TRUE     $2,412…    20 blue     Kris… kris… Sint… 2017-07-1… <chr> #> 2 5cd678531b… FALSE    $3,400…    20 brown    Rae … raec… Nisi… 2018-12-1… <chr> #> # ℹ 1 more variable: friends <list>"},{"path":"https://docs.ropensci.org/nodbi/articles/nodbi-overview.html","id":"docdb_query","dir":"Articles","previous_headings":"Functionality","what":"docdb_query","title":"nodbi - package overview","text":"One powerful functions nodbi docdb_query() permits combine query select documents filter fields interest. parameters query (obligatory) fields (optional) use, across databases, MongoDB syntax documented queries fields. Unless fields specifies \"_id\": 0, _id field always included output docdb_query(). Queries can complex example, showing dot notation sub-field example operator (regular expression). Queries work across documents different structure .","code":"# query for some documents docdb_query(src = src, key = key, query = '{\"mpg\": {\"$gte\": 30}}') #>              _id  mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1       Fiat 128 32.4   4 78.7  66 4.08 2.200 19.47  1  1    4    1 #> 2    Honda Civic 30.4   4 75.7  52 4.93 1.615 18.52  1  1    4    2 #> 3 Toyota Corolla 33.9   4 71.1  65 4.22 1.835 19.90  1  1    4    1 #> 4   Lotus Europa 30.4   4 95.1 113 3.77 1.513 16.90  1  1    5    2 # query some fields from some documents; 'query' is a mandatory # parameter and is used here in its position in the signature docdb_query(src, key, '{\"mpg\": {\"$gte\": 30}}', fields = '{\"wt\": 1, \"mpg\": 1}') #>              _id    wt  mpg #> 1       Fiat 128 2.200 32.4 #> 2    Honda Civic 1.615 30.4 #> 3 Toyota Corolla 1.835 33.9 #> 4   Lotus Europa 1.513 30.4 # query some fields from some documents, limit return to one document docdb_query(src, key, '{\"mpg\": {\"$gte\": 30}}', fields = '{\"_id\": 0, \"mpg\": 1}', limit = 1L) #>    mpg #> 1 32.4 # query some subitem fields from some documents str(docdb_query(   src, key,   query = '{\"$or\": [{\"age\": {\"$gt\": 21}},            {\"friends.name\": {\"$regex\": \"^B[a-z]{3,9}.*\"}}]}',   fields = '{\"age\": 1, \"friends.name\": 1}' )) #> 'data.frame':    3 obs. of  3 variables: #>  $ _id         : chr  \"5cd67853f841025e65ce0ce2\" \"5cd6785335b63cb19dfa8347\" \"5cd6785325ce3a94dfc54096\" #>  $ age         : int  23 30 22 #>  $ friends.name:List of 3 #>   ..$ : chr  \"Wooten Goodwin\" \"Brandie Woodward\" \"Angelique Britt\" #>   ..$ : chr  \"Coleen Dunn\" \"Doris Phillips\" \"Concetta Turner\" #>   ..$ : chr  \"Baird Keller\" \"Francesca Reese\" \"Dona Bartlett\" # query with results across documents docdb_query(   src, key,   query = '{\"$or\": [{\"age\": {\"$gt\": 21}}, {\"mpg\": {\"$gte\": 30}}]}',   fields = '{\"name\": 1, \"disp\": 1}' ) #>                        _id              name disp #> 1                 Fiat 128              <NA> 78.7 #> 2              Honda Civic              <NA> 75.7 #> 3           Toyota Corolla              <NA> 71.1 #> 4             Lotus Europa              <NA> 95.1 #> 5 5cd67853f841025e65ce0ce2         Lacy Chen   NA #> 6 5cd6785335b63cb19dfa8347 Williamson French   NA #> 7 5cd6785325ce3a94dfc54096         Pace Bell   NA"},{"path":"https://docs.ropensci.org/nodbi/articles/nodbi-overview.html","id":"field-names","dir":"Articles","previous_headings":"Functionality","what":"Field names","title":"nodbi - package overview","text":"JSON data handled package nodbi may large number field included nested fields objects (see example name within array friends ). Thus, argument provided docdb_query() function returns comprehensive list field names documents selected query (documents container query = \"{}\" specified). dot notation path root field nested field, notation can used query fields parameters docdb_query().","code":"docdb_query(src, key, query = '{\"_id\": {\"$regex\": \"^[0-9]\"}}', listfields = TRUE) #>  [1] \"about\"                            \"age\"                              #>  [3] \"balance\"                          \"destination_addresses\"            #>  [5] \"email\"                            \"eyeColor\"                         #>  [7] \"friends\"                          \"friends.id\"                       #>  [9] \"friends.name\"                     \"isActive\"                         #> [11] \"name\"                             \"origin_addresses\"                 #> [13] \"registered\"                       \"rows\"                             #> [15] \"rows.elements\"                    \"rows.elements.distance\"           #> [17] \"rows.elements.distance.somevalue\" \"rows.elements.distance.text\"      #> [19] \"rows.elements.duration\"           \"rows.elements.duration.somevalue\" #> [21] \"rows.elements.duration.text\"      \"rows.elements.status\"             #> [23] \"status\"                           \"tags\""},{"path":"https://docs.ropensci.org/nodbi/articles/nodbi-overview.html","id":"docdb_update","dir":"Articles","previous_headings":"Functionality","what":"docdb_update","title":"nodbi - package overview","text":"Queries can also used updating (patching) selected documents new value. return value docdb_update() corresponds number documents updated. another powerful function value can come data frame, list, JSON string, file name URL pointing NDJSON, value includes row names _id’s, used identify documents updated.","code":"# number of documents corresponding to query nrow(docdb_query(src, key, query = '{\"carb\": 3}')) #> [1] 3  # update all documents using JSON, replacing the previously existing values docdb_update(src, key, value = '{\"vs\": 9, \"xy\": [1, 2]}', query = '{\"carb\": 3}') #> [1] 3  # update with value that includes _id's docdb_update(src, key, value = '{\"_id\": \"Merc 450SLC\", \"xy\": 33}', query = \"{}\") #> [1] 1  # show updated values docdb_query(src, key, query = '{\"carb\": 3}', fields = '{\"xy\": 1}') #>           _id   xy #> 1  Merc 450SE 1, 2 #> 2  Merc 450SL 1, 2 #> 3 Merc 450SLC   33"},{"path":"https://docs.ropensci.org/nodbi/articles/nodbi-overview.html","id":"docdb_delete","dir":"Articles","previous_headings":"Functionality","what":"docdb_delete","title":"nodbi - package overview","text":"Documents containers can deleted docdb_delete(). return value corresponds success delete operation.","code":"# number of documents corresponding to query nrow(docdb_query(src, key, query = '{\"age\": {\"$lte\": 23}}')) #> [1] 4  # to delete selected documents, specify a query parameter docdb_delete(src, key, query = '{\"age\": {\"$lte\": 23}}') #> [1] TRUE  # this deletes the complete container from database docdb_delete(src, key) #> [1] TRUE  # check if still exists docdb_exists(src, key) #> [1] FALSE"},{"path":"https://docs.ropensci.org/nodbi/articles/nodbi-overview.html","id":"disconnect-and-shutdown","dir":"Articles","previous_headings":"Functionality","what":"Disconnect and shutdown","title":"nodbi - package overview","text":"Package nodbi includes automatic mechanism shutting , time quit() session restart, databases require (SQLite, DuckDB, PostgreSQL). Nevertheless, good practice manually disconnect shut connections specific database, example SQLite:","code":"src #> src: sqlite #> SQLite library version: 3.47.1 #>  size: NA MB #>  dbname: :memory: #> Warning: Database is only in memory, will not persist after R ends! Consider to copy it with  #> RSQLite::sqliteCopyDatabase( #>   from = <your nodbi::src_sqlite() object>$con,  #>   to = <e.g. RSQLite::dbConnect(RSQLite::SQLite(), 'local_file.db')> #>   )  # shutdown DBI::dbDisconnect(src$con, shutdown = TRUE) rm(src)"},{"path":"https://docs.ropensci.org/nodbi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ralf Herold. Author, maintainer. Scott Chamberlain. Author. Rich FitzJohn. Author. Jeroen Ooms. Author.","code":""},{"path":"https://docs.ropensci.org/nodbi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Herold R, Chamberlain S, FitzJohn R, Ooms J (2025). nodbi: 'NoSQL' Database Connector. R package version 0.11.0, https://docs.ropensci.org/nodbi/.","code":"@Manual{,   title = {nodbi: 'NoSQL' Database Connector},   author = {Ralf Herold and Scott Chamberlain and Rich FitzJohn and Jeroen Ooms},   year = {2025},   note = {R package version 0.11.0},   url = {https://docs.ropensci.org/nodbi/}, }"},{"path":"https://docs.ropensci.org/nodbi/index.html","id":"nodbi","dir":"","previous_headings":"","what":"NoSQL Database Connector","title":"NoSQL Database Connector","text":"⁠     ⁠ nodbi R package provides single interface several NoSQL databases databases JSON functionality, function parameters return values across database backends. Last updated 2024-11-10. speed comparisons database backends, see benchmark testing .","code":""},{"path":"https://docs.ropensci.org/nodbi/index.html","id":"api-overview","dir":"","previous_headings":"","what":"API overview","title":"NoSQL Database Connector","text":"Parameters docdb_*() functions across database backends. See walk-canonical testing core-nodbi.R. “Container” used term indicate conceptually backend holds data, see Database connections . key parameter holds name container.","code":""},{"path":"https://docs.ropensci.org/nodbi/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"NoSQL Database Connector","text":"CRAN version Development version Load package library","code":"install.packages(\"nodbi\") remotes::install_github(\"ropensci/nodbi\") library(\"nodbi\")"},{"path":"https://docs.ropensci.org/nodbi/index.html","id":"database-connections","dir":"","previous_headings":"","what":"Database connections","title":"NoSQL Database Connector","text":"Overview parameters aspects specific database backend. needed , src_*() create connection object. connection object subsequently used similarly across docdb_* functions. “Container” refers conceptually backend holds data. Data types mapped JSON R objects jsonlite. root-level _id extracted document(s) used index column _id, otherwise UUID created _id.","code":""},{"path":"https://docs.ropensci.org/nodbi/index.html","id":"duckdb","dir":"","previous_headings":"Database connections","what":"DuckDB","title":"NoSQL Database Connector","text":"See also https://CRAN.R-project.org/package=duckdb. “Container” refers DuckDB table, columns _id json created used package nodbi, applying SQL functions functions per https://duckdb.org/docs/extensions/json json column. row table represents JSON document.","code":"src <- nodbi::src_duckdb(dbdir = \":memory:\", ...)"},{"path":"https://docs.ropensci.org/nodbi/index.html","id":"mongodb","dir":"","previous_headings":"Database connections","what":"MongoDB","title":"NoSQL Database Connector","text":"“Container” refers MongoDB collection, nodbi creates JSON documents. See also https://jeroen.github.io/mongolite/. MongoDB none databases require specify container name already src_*() function; use collection name parameter key docdb_* functions.","code":"src <- nodbi::src_mongo(   collection = \"my_container\", db = \"my_database\",   url = \"mongodb://localhost\", ...)"},{"path":"https://docs.ropensci.org/nodbi/index.html","id":"sqlite","dir":"","previous_headings":"Database connections","what":"SQLite","title":"NoSQL Database Connector","text":"“Container” refers SQLite table, columns _id json created used package nodbi, applying SQL functions functions per https://www.sqlite.org/json1.html json column. row table represents JSON document. table indexed _id. See also https://CRAN.R-project.org/package=RSQLite.","code":"src <- nodbi::src_sqlite(dbname = \":memory:\", ...)"},{"path":"https://docs.ropensci.org/nodbi/index.html","id":"couchdb","dir":"","previous_headings":"Database connections","what":"CouchDB","title":"NoSQL Database Connector","text":"“Container” refers CouchDB database, nodbi creates JSON documents. See also https://CRAN.R-project.org/package=sofa. CouchDB, function docdb_update() uses jqr implement patching JSON, analogy functions available databases.","code":"src <- nodbi::src_couchdb(   host = \"127.0.0.1\", port = 5984L, path = NULL,   transport = \"http\", user = NULL, pwd = NULL, headers = NULL)"},{"path":"https://docs.ropensci.org/nodbi/index.html","id":"elasticsearch","dir":"","previous_headings":"Database connections","what":"Elasticsearch","title":"NoSQL Database Connector","text":"“Container” refers Elasticsearch index, nodbi creates JSON documents. Opensearch can equally used. See also https://CRAN.R-project.org/package=elastic. lowercase accepted container names (parameter key docdb_* functions).","code":"src <- nodbi::src_elastic(   host = \"127.0.0.1\", port = 9200L, path = NULL,   transport_schema = \"http\", user = NULL, pwd = NULL, ...)"},{"path":"https://docs.ropensci.org/nodbi/index.html","id":"postgresql","dir":"","previous_headings":"Database connections","what":"PostgreSQL","title":"NoSQL Database Connector","text":"“Container” refers PostgreSQL table, columns _id json created used package nodbi, applying SQL functions functions per https://www.postgresql.org/docs/current/functions-json.html json column. PostgreSQL, custom plpgsql function jsonb_merge_patch() used docdb_update(). order variables data frames returned docdb_get() docdb_query() can differ order input docdb_create().","code":"src <- nodbi::src_postgres(   dbname = \"my_database\", host = \"127.0.0.1\", port = 5432L, ...)"},{"path":"https://docs.ropensci.org/nodbi/index.html","id":"walk-through","dir":"","previous_headings":"","what":"Walk-through","title":"NoSQL Database Connector","text":"example show functional nodbi time: six database backends, functions work way return values.","code":"# load nodbi library(nodbi)  # name of container key <- \"my_container\"  # connect any of these database backends src <- src_duckdb() src <- src_mongo(collection = key) src <- src_sqlite() src <- src_postgres() src <- src_elastic() src <- src_couchdb(   user = Sys.getenv(\"COUCHDB_TEST_USER\"),    pwd = Sys.getenv(\"COUCHDB_TEST_PWD\"))  # check if container already exists docdb_exists(src, key) # [1] FALSE  # load data (here data frame, alternatively a list, JSON or file with NSJSON) # into the container \"my_container\" specified in \"key\" parameter docdb_create(src, key, value = mtcars) # [1] 32  # load additionally 98 NDJSON records docdb_create(src, key, \"https://httpbin.org/stream/98\") # Note: container 'my_container' already exists # [1] 98  # load additionally contacts JSON data, from package nodbi docdb_create(src, key, contacts) # Note: container 'my_container' already exists # [1] 5  # get all documents, irrespective of schema dplyr::tibble(docdb_get(src, key)) # # A tibble: 135 × 27 #    `_id` isActive balance   age eyeColor name  email about registered tags   friends #    <chr> <lgl>    <chr>   <int> <chr>    <chr> <chr> <chr> <chr>      <list> <list>  #  1 5cd6… TRUE     $2,412…    20 blue     Kris… kris… \"Sin… 2017-07-1… <chr>  <df>    #  2 5cd6… FALSE    $3,400…    20 brown    Rae … raec… \"Nis… 2018-12-1… <chr>  <df>    #  3 5cd6… TRUE     $1,161…    22 brown    Pace… pace… \"Eiu… 2018-08-1… <chr>  <df>    #  4 5cd6… FALSE    $2,579…    30 brown    Will… will… \"Nul… 2018-02-1… <chr>  <df>    #  5 5cd6… FALSE    $3,808…    23 green    Lacy… lacy… \"Sun… 2014-08-0… <chr>  <df>    #  6 69bc… NA       NA         NA NA       NA    NA     NA   NA         <NULL> <NULL>  #  7 69bc… NA       NA         NA NA       NA    NA     NA   NA         <NULL> <NULL>  #  8 69bc… NA       NA         NA NA       NA    NA     NA   NA         <NULL> <NULL>  #  9 69bc… NA       NA         NA NA       NA    NA     NA   NA         <NULL> <NULL>  # 10 69bc… NA       NA         NA NA       NA    NA     NA   NA         <NULL> <NULL>  # # ℹ 125 more rows # # ℹ 16 more variables: url <chr>, args <df[,0]>, headers <df[,4]>, origin <chr>, # #   id <int>, mpg <dbl>, cyl <int>, disp <dbl>, hp <int>, drat <dbl>, wt <dbl>, # #   qsec <dbl>, vs <int>, am <int>, gear <int>, carb <int> # # ℹ Use `print(n = ...)` to see more rows   # query some documents docdb_query(src, key, query = '{\"mpg\": {\"$gte\": 30}}') #              _id mpg cyl disp  hp drat  wt qsec vs am gear carb # 1       Fiat 128  32   4   79  66  4.1 2.2   19  1  1    4    1 # 2    Honda Civic  30   4   76  52  4.9 1.6   19  1  1    4    2 # 3 Toyota Corolla  34   4   71  65  4.2 1.8   20  1  1    4    1 # 4   Lotus Europa  30   4   95 113  3.8 1.5   17  1  1    5    2  # query some fields from some documents; 'query' is a mandatory  # parameter and is used here in its position in the signature docdb_query(src, key, '{\"mpg\": {\"$gte\": 30}}', fields = '{\"wt\": 1, \"mpg\": 1}') #              _id  wt mpg # 1       Fiat 128 2.2  32 # 2    Honda Civic 1.6  30 # 3   Lotus Europa 1.5  30 # 4 Toyota Corolla 1.8  34  # query some subitem fields from some documents str(docdb_query(   src, key,    query = '{\"$or\": [{\"age\": {\"$gt\": 21}},             {\"friends.name\": {\"$regex\": \"^B[a-z]{3,9}.*\"}}]}',    fields = '{\"age\": 1, \"friends.name\": 1}')) # 'data.frame': 3 obs. of  3 variables: #  $ _id         : chr  \"5cd6785325ce3a94dfc54096\" \"5cd6785335b63cb19dfa8347\" \"5cd67853f841025e65ce0ce2\" #  $ age         : int  22 30 23 #  $ friends.name:List of 3 #   ..$ : chr  \"Baird Keller\" \"Francesca Reese\" \"Dona Bartlett\" #   ..$ : chr  \"Coleen Dunn\" \"Doris Phillips\" \"Concetta Turner\" #   ..$ : chr  \"Wooten Goodwin\" \"Brandie Woodward\" \"Angelique Britt\"  # such queries can also be used for updating (patching) selected documents  # with a new 'value'(s) from a JSON string, a data frame a list or a file with NSJSON) docdb_update(src, key, value = '{\"vs\": 9, \"xy\": [1, 2]}', query = '{\"carb\": 3}') # [1] 3 docdb_query(src, key, '{\"carb\": {\"$in\": [1,3]}}', fields = '{\"vs\": 1, \"_id\": 0}')[[1]] # [1] 1 1 1 9 9 9 1 1 1 1 docdb_get(src, key)[c(3, 109, 130, 101), c(\"_id\", \"xy\", \"url\", \"email\")] #                                      _id   xy                           url                  email # 3               5cd6785325ce3a94dfc54096 NULL                          <NA> pacebell@conjurica.com # 109                     Dodge Challenger NULL                          <NA>                   <NA> # 130                     Pontiac Firebird NULL                          <NA>                   <NA> # 101 69bcd195-a59c-11ee-bfb9-acbc328130bb NULL https://httpbin.org/stream/98                   <NA>  # use with dplyr # *note* that dplyr includes a (deprecated) function src_sqlite # which would mask nodbi's src_sqlite, so it is excluded here library(\"dplyr\", exclude = c(\"src_sqlite\", \"src_postgres\")) #  docdb_get(src, key) %>%   group_by(gear) %>%   summarise(mean_mpg = mean(mpg)) # # A tibble: 4 × 2 #    gear mean_mpg #   <int>    <dbl> # 1     3     16.1 # 2     4     24.5 # 3     5     21.4 # 4    NA     NA   # delete documents; query is optional parameter and has to be  # specified for deleting documents instead of deleting the container dim(docdb_query(src, key, query = '{\"$or\": [{\"age\": {\"$lte\": 20}}, {\"age\": {\"$gte\": 25}}]}')) # [1] 3 11 docdb_delete(src, key, query = '{\"$or\": [{\"age\": {\"$lte\": 20}}, {\"age\": {\"$gte\": 25}}]}') # TRUE nrow(docdb_get(src, key)) # [1] 132  # delete container from database docdb_delete(src, key) # [1] TRUE #  # shutdown DBI::dbDisconnect(src$con, shutdown = TRUE); rm(src)"},{"path":"https://docs.ropensci.org/nodbi/index.html","id":"benchmark","dir":"","previous_headings":"","what":"Benchmark","title":"NoSQL Database Connector","text":"","code":"library(\"nodbi\")  srcMongo <- src_mongo() srcSqlite <- src_sqlite() srcPostgres <- src_postgres() srcDuckdb <- src_duckdb() srcElastic <- src_elastic() srcCouchdb <- src_couchdb(   user = Sys.getenv(\"COUCHDB_TEST_USER\"),    pwd = Sys.getenv(\"COUCHDB_TEST_PWD\"))  key <- \"test\" query <- '{\"clarity\": {\"$in\": [\"NOTME\", \"VS1\"]}}' fields <- '{\"cut\": 1, \"_id\": 1, \"clarity\": 1}' value <- '{\"clarity\": \"XYZ\", \"new\": [\"ABC\", \"DEF\"]}' data <- diamonds[1:1000, ] ndjs <- tempfile() jsonlite::stream_out(diamonds[1:10000, ], con = file(ndjs), verbose = FALSE)  testFunction <- function(src, key, value, query, fields) {   try(docdb_delete(src, key), silent = TRUE)   on.exit(docdb_delete(src, key))   suppressMessages(docdb_create(src, key, data))   suppressMessages(docdb_create(src, key, ndjs))   head(docdb_get(src, key))   docdb_query(src, key, query = query, fields = fields)   docdb_query(src, key, query = query, listfields = TRUE)   docdb_update(src, key, value = value, query = query) }  result <- rbenchmark::benchmark(   MongoDB = testFunction(src = srcMongo, key, value, query, fields),   SQLite = testFunction(src = srcSqlite, key, value, query, fields),   Elastic = testFunction(src = srcElastic, key, value, query, fields),   CouchDB = testFunction(src = srcCouchdb, key, value, query, fields),   PostgreSQL = testFunction(src = srcPostgres, key, value, query, fields),   DuckDB = testFunction(src = srcDuckdb, key, value, query, fields),   replications = 3L )  # 2024-11-10 with M3 hardware, databases via homebrew result[rev(order(result$elapsed)), c('test', 'replications', 'elapsed')] #         test replications elapsed # 4    CouchDB            3   52.81 # 3    Elastic            3   27.76 # 5 PostgreSQL            3    1.59 # 1    MongoDB            3    1.41 # 6     DuckDB            3    1.10 # 2     SQLite            3    0.71  message(R.version$version.string) # R version 4.4.2 (2024-10-31)  pkgs <- c(\"RSQLite\", \"duckdb\", \"RPostgres\", \"mongolite\", \"elastic\", \"sofa\") for (pkg in pkgs) message(pkg, \": \", packageVersion(pkg)) # RSQLite: 2.3.7.9017 # duckdb: 1.1.2 # RPostgres: 1.4.7 # mongolite: 2.8.1 # elastic: 1.2.0 # sofa: 0.4.0"},{"path":"https://docs.ropensci.org/nodbi/index.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"NoSQL Database Connector","text":"Every database backend subjected identical tests, see core-nodbi.R.","code":"# 2024-11-10 suppressMessages(testthat::test_local()) # ✔ | F W  S  OK | Context # ✔ |      2 175 | couchdb [47.9s] # ✔ |      1 174 | duckdb [3.5s] # ✔ |      2 173 | elastic [38.3s] # ✔ |      2 173 | mongodb [3.6s] # ✔ |        176 | postgres [4.3s] # ✔ |        177 | sqlite [3.5s] #  # ══ Results ══════════════════════════ # Duration: 101.2 s #  # ── Skipped tests (7) ──────────────── # • Testing for auto disconnect and shutdown not relevant (3):  #   test-couchdb.R:26:3, test-elastic.R:21:3, test-mongodb.R:24:3 # • Testing for parallel writes not possible or implemented (4):  #   test-couchdb.R:26:3, test-duckdb.R:22:3,  #   test-elastic.R:21:3, test-mongodb.R:24:3 #  # [ FAIL 0 | WARN 0 | SKIP 7 | PASS 1048 ]  # 2024-11-10 covr::package_coverage(path = \".\", type = \"tests\") # nodbi Coverage: 94.07% # R/src_postgres.R: 79.31% # R/src_duckdb.R: 79.49% # R/zzz.R: 87.79% # R/src_mongo.R: 92.59% # R/update.R: 94.40% # R/query.R: 94.57% # R/get.R: 95.24% # R/create.R: 96.25% # R/delete.R: 98.96% # R/exists.R: 100.00% # R/list.R: 100.00% # R/src_couchdb.R: 100.00% # R/src_elasticsearch.R: 100.00% # R/src_sqlite.R: 100.00%"},{"path":"https://docs.ropensci.org/nodbi/index.html","id":"notes","dir":"","previous_headings":"","what":"Notes","title":"NoSQL Database Connector","text":"Please report issues bugs. License: MIT Get citation information nodbi R citation(package = 'nodbi') Please note package released Contributor Code Conduct. contributing project, agree abide terms. Support redis removed since version 0.5.","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/contacts.html","id":null,"dir":"Reference","previous_headings":"","what":"Data set 'contacts' — contacts","title":"Data set 'contacts' — contacts","text":"Data set 'contacts'","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/contacts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data set 'contacts' — contacts","text":"","code":"contacts"},{"path":"https://docs.ropensci.org/nodbi/reference/contacts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data set 'contacts' — contacts","text":"JSON string ragged, nested contact details","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/diamonds.html","id":null,"dir":"Reference","previous_headings":"","what":"Data set 'diamonds' — diamonds","title":"Data set 'diamonds' — diamonds","text":"Data set 'diamonds'","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/diamonds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data set 'diamonds' — diamonds","text":"data frame 53940 rows 10 variables: price price US dollars (326-18,823 USD) carat weight diamond (0.2-5.01) cut quality cut (Fair, Good, Good, Premium, Ideal) color diamond colour, J (worst) D (best) clarity measurement clear diamond (I1 (worst), SI1, SI2, VS1, VS2, VVS1, VVS2, (best)) x length mm (0-10.74) y width mm (0-58.9) z depth mm (0-31.8) depth total depth percentage = z / mean(x, y) = 2 * z / (x + y) (43-79) table width top diamond relative widest point (43-95)","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/diamonds.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data set 'diamonds' — diamonds","text":"ggplot2","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create documents in a database — docdb_create","title":"Create documents in a database — docdb_create","text":"message emitted container key already exists.","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create documents in a database — docdb_create","text":"","code":"docdb_create(src, key, value, ...)"},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create documents in a database — docdb_create","text":"src Source object, result call functions src_mongo(), src_sqlite(), src_elastic(), src_couchdb() src_duckdb() src_postgres() key (character) name container database backend (corresponds collection MongoDB, dbname CouchDB, index Elasticsearch, table name DuckDB, SQLite PostgreSQL) value data created database: single data.frame, JSON string, list, file name URL points NDJSON documents ... Passed functions sofa::db_bulk_create(), elastic::docs_bulk(), mongolite::mongo()$insert()","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create documents in a database — docdb_create","text":"(integer) Number successfully created documents","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create documents in a database — docdb_create","text":"error raised document(s) value _id already exist(s) collection key; use docdb_update() update document(s).","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_create.html","id":"identifiers","dir":"Reference","previous_headings":"","what":"Identifiers","title":"Create documents in a database — docdb_create","text":"value data.frame column _id, JSON string key _id root level, list item _id top level, used _id's primary index database. _id's value, row names (exist) value used _id's, otherwise random _id's created (using uuid::UUIDgenerate() use.time = TRUE SQLite PostgreSQL, using DuckDB's built-uuid()).","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create documents in a database — docdb_create","text":"","code":"if (FALSE) { # \\dontrun{ src <- src_sqlite() docdb_create(src,   key = \"diamonds_small\",   value = as.data.frame(diamonds[1:3000L, ]) ) head(docdb_get(src, \"diamonds_small\")) docdb_create(src, key = \"contacts\", value = contacts) docdb_get(src, \"contacts\")[[\"friends\"]] } # }"},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete documents or container — docdb_delete","title":"Delete documents or container — docdb_delete","text":"Delete documents container","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete documents or container — docdb_delete","text":"","code":"docdb_delete(src, key, ...)"},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete documents or container — docdb_delete","text":"src Source object, result call functions src_mongo(), src_sqlite(), src_elastic(), src_couchdb() src_duckdb() src_postgres() key (character) name container database backend (corresponds collection MongoDB, dbname CouchDB, index Elasticsearch, table name DuckDB, SQLite PostgreSQL) ... Optionally, specify query parameter JSON string per docdb_query() identify documents deleted. specified (default), deletes container key.","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_delete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete documents or container — docdb_delete","text":"(logical) Success operation. Typically TRUE document(s) collection existed, FALSE document(s) exist, collection exist, delete successful.","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete documents or container — docdb_delete","text":"","code":"if (FALSE) { # \\dontrun{ src <- src_sqlite() docdb_create(src, \"iris\", iris) docdb_delete(src, \"iris\", query = '{\"Species\": {\"$regex\": \"a$\"}}') docdb_delete(src, \"iris\") } # }"},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if container exists in database — docdb_exists","title":"Check if container exists in database — docdb_exists","text":"Check container exists database","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if container exists in database — docdb_exists","text":"","code":"docdb_exists(src, key, ...)"},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if container exists in database — docdb_exists","text":"src Source object, result call functions src_mongo(), src_sqlite(), src_elastic(), src_couchdb() src_duckdb() src_postgres() key (character) name container database backend (corresponds collection MongoDB, dbname CouchDB, index Elasticsearch, table name DuckDB, SQLite PostgreSQL) ... Passed functions DBI::dbListTables(), elastic::index_exists(), sofa::db_info()","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if container exists in database — docdb_exists","text":"(logical) TRUE FALSE indicate existence container key database. Note indicate container holds documents.","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if container exists in database — docdb_exists","text":"","code":"if (FALSE) { # \\dontrun{ src <- src_sqlite() docdb_exists(src, \"nonexistingcontainer\") docdb_create(src, \"mtcars\", mtcars) docdb_exists(src, \"mtcars\") } # }"},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all documents from container in database — docdb_get","title":"Get all documents from container in database — docdb_get","text":"Get documents container database","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all documents from container in database — docdb_get","text":"","code":"docdb_get(src, key, limit = NULL, ...)"},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all documents from container in database — docdb_get","text":"src Source object, result call functions src_mongo(), src_sqlite(), src_elastic(), src_couchdb() src_duckdb() src_postgres() key (character) name container database backend (corresponds collection MongoDB, dbname CouchDB, index Elasticsearch, table name DuckDB, SQLite PostgreSQL) limit (integer) Maximum number documents returned. NULL set (default), 10,000 Elasticsearch documents MongoDB, SQLite, CouchDB, PostgreSQL, DuckDB. ... Passed functions: MongoDB: find() mongolite::mongo() SQLite: ignored Elasticsearch: elastic::Search() CouchDB: sofa::db_alldocs() PostgreSQL: ignored DuckDB: ignored","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all documents from container in database — docdb_get","text":"Data frame, one document per row","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all documents from container in database — docdb_get","text":"","code":"if (FALSE) { # \\dontrun{ src <- src_sqlite() docdb_create(src, \"mtcars\", mtcars) docdb_get(src, \"mtcars\", limit = 10L) } # }"},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List containers in database — docdb_list","title":"List containers in database — docdb_list","text":"List containers database","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List containers in database — docdb_list","text":"","code":"docdb_list(src, ...)"},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List containers in database — docdb_list","text":"src Source object, result call functions src_mongo(), src_sqlite(), src_elastic(), src_couchdb() src_duckdb() src_postgres() ... Passed function DBI::dbListTables()","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List containers in database — docdb_list","text":"Vector names containers can used parameter key functions docdb_create().","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List containers in database — docdb_list","text":"","code":"if (FALSE) { # \\dontrun{ src <- src_sqlite() docdb_create(src, \"iris\", iris) docdb_list(src) } # }"},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Get documents or parts with filtering query — docdb_query","title":"Get documents or parts with filtering query — docdb_query","text":"Complements databases' native query filtering functions using jqr::jqr(). query = \"{}\" neither fields listfields specified, runs docdb_get().","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get documents or parts with filtering query — docdb_query","text":"","code":"docdb_query(src, key, query, ...)"},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get documents or parts with filtering query — docdb_query","text":"src Source object, result call functions src_mongo(), src_sqlite(), src_elastic(), src_couchdb() src_duckdb() src_postgres() key (character) name container database backend (corresponds collection MongoDB, dbname CouchDB, index Elasticsearch, table name DuckDB, SQLite PostgreSQL) query (character) JSON query string, see examples. Can use comparisons / tests ($lt, $lte, $gt, $gte, $ne, $, $regex), logic operators ($, $, (, )), including nested queries, see examples. $regex case-sensitive. Note query target field holds scalar array scalars, complex objects. ... Optional parameters: Specify fields JSON string fields returned anywhere tree, excluded returned, e.g. fields  = '{\"nameOfMy.SubFieldToInclude:\" 1, \"_id\": 0}' see examples. fields specified, complete JSON document returned. src_postgres(), fewer 50 fields can requested returned function. Specify limit (integer) maximum number documents returned. NULL set (default), 10,000 Elasticsearch documents MongoDB, SQLite, CouchDB, PostgreSQL, DuckDB. Specify listfields = TRUE return just names fields, documents maximum number documents specified limit.","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get documents or parts with filtering query — docdb_query","text":"Data frame requested documents, one per row, may nested lists columns; NULL documents found. listfields specified: vector field names dot path notation.","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_query.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get documents or parts with filtering query — docdb_query","text":"dot query fields interpreted dot path, pointing field nested within another, e.g. friends.id example.","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get documents or parts with filtering query — docdb_query","text":"","code":"if (FALSE) { # \\dontrun{ src <- src_sqlite()  docdb_create(src, \"myKey\", mtcars) docdb_create(src, \"myKey\", contacts) docdb_create(src, \"myKey\", mapdata)  docdb_query(src, \"myKey\", query = '{\"mpg\":21}') docdb_query(src, \"myKey\", query = '{\"mpg\":21, \"gear\": {\"$lte\": 4}}') docdb_query(src, \"myKey\", query = '{\"mpg\":21}', fields = '{\"_id\":0, \"mpg\":1, \"cyl\":1}') docdb_query(src, \"myKey\", query = '{\"_id\": {\"$regex\": \"^.+0.*$\"}}', fields = '{\"gear\": 1}')  docdb_query(src, \"myKey\", query = '{\"$and\": [{\"mpg\": {\"$lte\": 18}}, {\"gear\": {\"$gt\": 3}}]}') docdb_query(src, \"myKey\", query = '{}', fields = '{\"_id\":0, \"mpg\":1, \"cyl\":1}')  docdb_query(src, \"myKey\", query = '{\"$and\": [{\"age\": {\"$gt\": 21}},  {\"friends.name\": {\"$regex\": \"^B[a-z]{3,9}.*\"}}]}') docdb_query(src, \"myKey\", query = '{\"$or\": [{\"rows.elements.status\": \"OK\"}, {\"$and\": [  {\"_id\": \"5cd6785325ce3a94dfc54096\"}, {\"friends.name\": {\"$regex\": \"^B[a-z]{3,90}.*\"}}]}]}') docdb_query(src, \"myKey\", query = '{\"$and\": [{\"_id\": \"5cd6785325ce3a94dfc54096\"},  {\"friends.name\": {\"$regex\": \"^B[a-z]{3,90}.*\"}}]}') docdb_query(src, \"myKey\", query = '{\"origin_addresses\": {\"$in\": [\"Santa Barbara, CA, USA\",  \"New York, NY, USA\"]}}', fields = '{\"age\": 1, \"friends.id\": 1, \"_id\": 0,  \"rows.elements.status\": 1}')  docdb_query(src, \"myKey\", query = '{\"rows.elements.status\": \"OK\"}', listfields = TRUE)  } # }"},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update documents — docdb_update","title":"Update documents — docdb_update","text":"Documents updated patching JSON value. Documents identified query _id's value, latter takes precedence. value can multiple documents (_id's), iteratively updated.","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update documents — docdb_update","text":"","code":"docdb_update(src, key, value, query, ...)"},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update documents — docdb_update","text":"src Source object, result call functions src_mongo(), src_sqlite(), src_elastic(), src_couchdb() src_duckdb() src_postgres() key (character) name container database backend (corresponds collection MongoDB, dbname CouchDB, index Elasticsearch, table name DuckDB, SQLite PostgreSQL) value data created database: single data.frame, JSON string, list, file name URL points NDJSON documents query (character) JSON query string, see examples. Can use comparisons / tests ($lt, $lte, $gt, $gte, $ne, $, $regex), logic operators ($, $, (, )), including nested queries, see examples. Specify '{}' value includes _id's. ... Passed functions elastic::docs_bulk_update(), mongolite::mongo()$update().","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update documents — docdb_update","text":"(integer) Number successfully updated documents","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_update.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update documents — docdb_update","text":"Uses native functions MongoDB (mongolite::mongo()$update()), SQLite (jsonb_update()), DuckDB (jsonb_merge_patch()), Elasticsearch (elastic::docs_bulk_update()); plpgsql function added calling src_postgres(), jqr::jqr() programme CouchDB.","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/docdb_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update documents — docdb_update","text":"","code":"if (FALSE) { # \\dontrun{ src <- src_sqlite() docdb_create(src, \"mtcars\", mtcars) docdb_update(src, \"mtcars\", value = mtcars[3, 4:5], query = '{\"gear\": 3}') docdb_update(src, \"mtcars\", value = '{\"carb\":999}', query = '{\"gear\": 5}') docdb_update(src, \"mtcars\", value = '{\"_id\":\"Fiat 128\", \"carb\":888}', query = '{}') docdb_get(src, \"mtcars\") } # }"},{"path":"https://docs.ropensci.org/nodbi/reference/mapdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Data set 'mapdata' — mapdata","title":"Data set 'mapdata' — mapdata","text":"Data set 'mapdata'","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/mapdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data set 'mapdata' — mapdata","text":"","code":"mapdata"},{"path":"https://docs.ropensci.org/nodbi/reference/mapdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data set 'mapdata' — mapdata","text":"JSON string ragged, nested travel details","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/nodbi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Document database connector — nodbi-package","title":"Document database connector — nodbi-package","text":"Simplified document database access manipulation, providing common API across supported 'NoSQL' databases 'Elasticsearch', 'CouchDB', 'MongoDB' well 'SQLite/JSON1', 'PostgreSQL' 'DuckDB'.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/nodbi/reference/nodbi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Document database connector — nodbi-package","text":"Ralf Herold ralf.herold@mailbox.org Scott Chamberlain sckott@protonmail.com Rich FitzJohn rich.fitzjohn@gmail.com Jeroen Ooms jeroen.ooms@stat.ucla.edu","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup database connections — src","title":"Setup database connections — src","text":"src_*() function setup connection database backends. backends may specific parameters respective function src_*(), nodbi functions independent backend (e.g., see docdb_query()).","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup database connections — src","text":"MongoDB - src_mongo() SQLite - src_sqlite() Elasticsearch - src_elastic() CouchDB - src_couchdb() PostgreSQL - src_postgres() DuckDB - src_duckdb() Documentation details database: MongoDB - https://docs.mongodb.com/ SQLite/JSON1 - https://www.sqlite.org/json1.html Elasticsearch - https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html CouchDB - http://docs.couchdb.org/ PostgreSQL - https://www.postgresql.org/docs/current/functions-json.html DuckDB - https://duckdb.org/docs/extensions/json Documentation R packages used nodbi databases: mongolite - https://CRAN.R-project.org/package=mongolite RSQLite - https://CRAN.R-project.org/package=RSQLite elastic - https://CRAN.R-project.org/package=elastic sofa - https://CRAN.R-project.org/package=sofa RPostgres - https://CRAN.R-project.org/package=RPostgres duckdb - https://CRAN.R-project.org/package=duckdb","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_couchdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup a CouchDB database connection — src_couchdb","title":"Setup a CouchDB database connection — src_couchdb","text":"Setup CouchDB database connection","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_couchdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup a CouchDB database connection — src_couchdb","text":"","code":"src_couchdb(   host = \"127.0.0.1\",   port = 5984,   path = NULL,   transport = \"http\",   user = NULL,   pwd = NULL,   headers = NULL )"},{"path":"https://docs.ropensci.org/nodbi/reference/src_couchdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup a CouchDB database connection — src_couchdb","text":"host (character) host value, default: 127.0.0.1 port (integer/numeric) Port. Remember want port set, set parameter NULL. Default: 5984 path (character) context path appended end url, e.g., bar http://foo.com/bar. Default: NULL, ignored transport (character) http https. Default: http user (character) Username, pwd (character) Password, headers (list) list named headers","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_couchdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup a CouchDB database connection — src_couchdb","text":"nodbi source object","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_couchdb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup a CouchDB database connection — src_couchdb","text":"Uses sofa backend. nodbi creates uses CouchDB database JSON documents. documents root-level _id's, UUID's created _id's. Function docdb_update() uses jqr::jqr() implement patching JSON. benchmark, see https://github.com/ropensci/nodbi#benchmark.","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_couchdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup a CouchDB database connection — src_couchdb","text":"","code":"if (FALSE) { # \\dontrun{ con <- src_couchdb() print(con) } # }"},{"path":"https://docs.ropensci.org/nodbi/reference/src_duckdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup a DuckDB database connection — src_duckdb","title":"Setup a DuckDB database connection — src_duckdb","text":"Setup DuckDB database connection","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_duckdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup a DuckDB database connection — src_duckdb","text":"","code":"src_duckdb(drv = duckdb::duckdb(), dbdir = attr(drv, \"dbdir\"), ...)"},{"path":"https://docs.ropensci.org/nodbi/reference/src_duckdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup a DuckDB database connection — src_duckdb","text":"drv Object returned duckdb() dbdir Location database files. path existing directory file system. default (\"\"), data kept RAM. ... Additional named parameters passed DBI::dbConnect()","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_duckdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup a DuckDB database connection — src_duckdb","text":"nodbi source object","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_duckdb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup a DuckDB database connection — src_duckdb","text":"Uses duckdb::duckdb() backend. nodbi creates uses DuckDB table, columns _id json created used package nodbi, applying SQL functions per https://duckdb.org/docs/extensions/json json column. row table represents JSON document. root-level _id extracted document(s) used column _id, otherwise UUID created _id. table indexed _id. benchmark, see https://github.com/ropensci/nodbi#benchmark.","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_duckdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup a DuckDB database connection — src_duckdb","text":"","code":"if (FALSE) { # \\dontrun{ con <- src_duckdb() print(con) } # }"},{"path":"https://docs.ropensci.org/nodbi/reference/src_elastic.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup an Elasticsearch database connection — src_elastic","title":"Setup an Elasticsearch database connection — src_elastic","text":"Setup Elasticsearch database connection","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_elastic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup an Elasticsearch database connection — src_elastic","text":"","code":"src_elastic(   host = \"127.0.0.1\",   port = 9200,   path = NULL,   transport_schema = \"http\",   user = NULL,   pwd = NULL,   force = FALSE,   ... )"},{"path":"https://docs.ropensci.org/nodbi/reference/src_elastic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup an Elasticsearch database connection — src_elastic","text":"host (character) base url, defaults localhost (http://127.0.0.1) port (character) port connect , defaults 9200 (optional) path (character) context path appended end url. Default: NULL, ignored transport_schema (character) http https. Default: http user (character) User name, required connection. can specify, ignored now. pwd (character) Password, required connection. can specify, ignored now. force (logical) Force re-load connection details ... args passed elastic::connect()","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_elastic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup an Elasticsearch database connection — src_elastic","text":"nodbi source object","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_elastic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup an Elasticsearch database connection — src_elastic","text":"Uses elastic backend. nodbi creates uses Elasticsearch index, nodbi creates JSON documents. root-level _id extracted document(s) used document ID _id, otherwise UUID created document ID _id. lowercase accepted container names (parameter key). Opensearch can equally used. benchmark, see https://github.com/ropensci/nodbi#benchmark","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_elastic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup an Elasticsearch database connection — src_elastic","text":"","code":"if (FALSE) { # \\dontrun{ con <- src_elastic() print(con) } # }"},{"path":"https://docs.ropensci.org/nodbi/reference/src_mongo.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup a MongoDB database connection — src_mongo","title":"Setup a MongoDB database connection — src_mongo","text":"Setup MongoDB database connection","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_mongo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup a MongoDB database connection — src_mongo","text":"","code":"src_mongo(collection = \"test\", db = \"test\", url = \"mongodb://localhost\", ...)"},{"path":"https://docs.ropensci.org/nodbi/reference/src_mongo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup a MongoDB database connection — src_mongo","text":"collection (character) Name collection db (character) Name database url (character) Address MongoDB server Mongo connection string URI format, see mongolite::mongo() ... Additional named parameters passed mongolite::mongo()","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_mongo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup a MongoDB database connection — src_mongo","text":"nodbi source object","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_mongo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup a MongoDB database connection — src_mongo","text":"Uses monoglite backend. nodbi creates uses MongoDB collection, nodbi creates JSON documents. documents root-level _id's, UUID's created _id's. MongoDB none databases require specify container already src_mongo() function. benchmark, see https://github.com/ropensci/nodbi#benchmark","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_mongo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup a MongoDB database connection — src_mongo","text":"","code":"if (FALSE) { # \\dontrun{ con <- src_mongo() print(con) } # }"},{"path":"https://docs.ropensci.org/nodbi/reference/src_postgres.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup a PostgreSQL database connection — src_postgres","title":"Setup a PostgreSQL database connection — src_postgres","text":"Setup PostgreSQL database connection","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_postgres.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup a PostgreSQL database connection — src_postgres","text":"","code":"src_postgres(dbname = \"test\", host = \"localhost\", port = 5432L, ...)"},{"path":"https://docs.ropensci.org/nodbi/reference/src_postgres.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup a PostgreSQL database connection — src_postgres","text":"dbname (character) name database, exist open connection host (character) host database, see RPostgres::Postgres() port (integer) port database, see RPostgres::Postgres() ... additional named parameters passed RPostgres::Postgres()","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_postgres.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup a PostgreSQL database connection — src_postgres","text":"nodbi source object","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_postgres.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup a PostgreSQL database connection — src_postgres","text":"Uses RPostgres backend. nodbi creates uses PostgreSQL table, columns _id json created used package nodbi, applying SQL functions per https://www.postgresql.org/docs/current/functions-json.html json column. row table represents JSON document. root-level _id extracted document(s) used column _id, otherwise UUID created _id. table indexed _id. custom plpgsql function jsonb_merge_patch() used docdb_update(). order variables data frames returned docdb_get() docdb_query() can differ order input docdb_create(). benchmark, see https://github.com/ropensci/nodbi#benchmark","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_postgres.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup a PostgreSQL database connection — src_postgres","text":"","code":"if (FALSE) { # \\dontrun{ con <- src_postgres() print(con) } # }"},{"path":"https://docs.ropensci.org/nodbi/reference/src_sqlite.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup a RSQLite database connection — src_sqlite","title":"Setup a RSQLite database connection — src_sqlite","text":"Setup RSQLite database connection","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_sqlite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup a RSQLite database connection — src_sqlite","text":"","code":"src_sqlite(dbname = \":memory:\", ...)"},{"path":"https://docs.ropensci.org/nodbi/reference/src_sqlite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup a RSQLite database connection — src_sqlite","text":"dbname (character) name database file, defaults \":memory:\" -memory database, see RSQLite::SQLite() ... additional named parameters passed RSQLite::SQLite()","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_sqlite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup a RSQLite database connection — src_sqlite","text":"nodbi source object","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_sqlite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup a RSQLite database connection — src_sqlite","text":"Uses RSQLite backend. nodbi creates uses SQLite table, columns _id json created used package nodbi, applying SQL functions per https://www.sqlite.org/json1.html json column. row table represents JSON document. root-level _id extracted document(s) used column _id, otherwise UUID created _id. table indexed _id. benchmark, see https://github.com/ropensci/nodbi#benchmark","code":""},{"path":"https://docs.ropensci.org/nodbi/reference/src_sqlite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup a RSQLite database connection — src_sqlite","text":"","code":"if (FALSE) { # \\dontrun{ con <- src_sqlite() print(con) } # }"},{"path":[]},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fixes-0-11-0-9000","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nodbi 0.11.0.9000","text":"Removing message RSQLite handling NDJSON file name value","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-0110","dir":"Changelog","previous_headings":"","what":"nodbi 0.11.0","title":"nodbi 0.11.0","text":"CRAN release: 2024-11-10","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"potentially-breaking-changes-0-11-0","dir":"Changelog","previous_headings":"","what":"Potentially breaking changes","title":"nodbi 0.11.0","text":"docdb_query() modified returns data frame, column just one type (atomic list) across rows respective column (previously, e.g. mix single-item lists simplified atomic values multi-item lists returned)","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"changes-0-11-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"nodbi 0.11.0","text":"docdb_create() docdb_update() SQLite PostgreSQL (localhost) now import directly fast ndjson files, analogy DuckDB (needs RSQLite >= 2.3.7.9014) Refactored docdb_update() src_couchdb() Add message docdb_create() data frame column names dot(s) since dots nodbi used JSON dot paths Add code check database backend version requirements Adding info PostgreSQL database yet created Factored code","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-0107","dir":"Changelog","previous_headings":"","what":"nodbi 0.10.7","title":"nodbi 0.10.7","text":"CRAN release: 2024-09-29","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"changes-0-10-7","dir":"Changelog","previous_headings":"","what":"Changes","title":"nodbi 0.10.7","text":"uses new features duckdb 1.11.0 refactoring docdb_query(), accelerating queries accelerated creating updating file","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-0106","dir":"Changelog","previous_headings":"","what":"nodbi 0.10.6","title":"nodbi 0.10.6","text":"CRAN release: 2024-07-25","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"changes-0-10-6","dir":"Changelog","previous_headings":"","what":"Changes","title":"nodbi 0.10.6","text":"partial refactoring docdb_query(), accelerating queries 20-fold SQLite, DuckDB, accelerating listfields = TRUE several times DuckDB","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fix-0-10-6","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"nodbi 0.10.6","text":"address docdb_query() working cases dot paths counts fields address wrong database size printing","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-0105","dir":"Changelog","previous_headings":"","what":"nodbi 0.10.5","title":"nodbi 0.10.5","text":"CRAN release: 2024-06-30","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fix-0-10-5","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"nodbi 0.10.5","text":"stop query invalid even though JSON valid print information also MongoDB connection object","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"changes-0-10-5","dir":"Changelog","previous_headings":"","what":"Changes","title":"nodbi 0.10.5","text":"code cleaning, parameters checking document $regex docdb_query() case-sensitive","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-0104","dir":"Changelog","previous_headings":"","what":"nodbi 0.10.4","title":"nodbi 0.10.4","text":"CRAN release: 2024-03-06","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fix-0-10-4","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"nodbi 0.10.4","text":"re-adding field formatting docdb_query(src, key, query, listfields = TRUE, limit = <integer>)","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-0103","dir":"Changelog","previous_headings":"","what":"nodbi 0.10.3","title":"nodbi 0.10.3","text":"CRAN release: 2024-03-03","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fix-0-10-3","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"nodbi 0.10.3","text":"minor fixes limit docdb_query(src, key, query, listfields = TRUE, limit = <integer>) speed ","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-0102","dir":"Changelog","previous_headings":"","what":"nodbi 0.10.2","title":"nodbi 0.10.2","text":"CRAN release: 2024-02-24","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"changes-0-10-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"nodbi 0.10.2","text":"added vignette added tests internal functions, verbose option added caching GitHub action workflow added missing fields validity check duckdb robust parameter checks docdb_query docdb_update ensure NULL also MongoDB returns","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fixes-0-10-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nodbi 0.10.2","text":"docTyp’ed src.R minify JSON Elasticsearch docdb_update moved local variable UseMethod docdb_query","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-0101","dir":"Changelog","previous_headings":"","what":"nodbi 0.10.1","title":"nodbi 0.10.1","text":"CRAN release: 2024-02-04","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fix-0-10-1","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"nodbi 0.10.1","text":"make docdb_get() work src_sqlite() casting JSONB back JSON","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-0100","dir":"Changelog","previous_headings":"","what":"nodbi 0.10.0","title":"nodbi 0.10.0","text":"CRAN release: 2024-01-21","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"deprecated-0-10-0","dir":"Changelog","previous_headings":"","what":"Deprecated","title":"nodbi 0.10.0","text":"empty parameter query now triggers warning valid JSON string; change query = \"\" query = \"{}\"","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"changes-0-10-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"nodbi 0.10.0","text":"adapted use new, faster JSONB functions SQLite 3.45.0 (RSQLite >= 2.3.4.9005) refactored parts docdb_create() speed handling large data frames lists made Elasticsearch immediately refresh index docdb_create() functions docdb_update() now reports records failed update continues docdb_delete() now returns harmonised success logical value across backends","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"potentially-breaking-change-0-10-0","dir":"Changelog","previous_headings":"","what":"Potentially breaking change","title":"nodbi 0.10.0","text":"docdb_query() reimplementation functionality across databases (DuckDB, SQLite, PostgreSQL, MongoDB, Elasticsearch, CouchDB); even though API unit tests remained, user provisions may break e.g. handle return values databases previously incompletely implemented (particular Elasticsearch CouchDB). Details: query can now complex (nested, various operators) digested Javascript helper fields can now nested fields (e.g., friends.name) directly return values lifted nested field listfields parameter newly implemented return dot paths fields selected documents collection expanded use jq via jqr mangling parameters, selecting documents, filtering fields lifting nested field values data found, returns NULL (previously backends returned empty data frame) docdb_query(src, key, query = \"{}\", fields = \"{}\") now delegates docdb_get(src, key) _id always returned, unless specified \"_id\": 0 parameter fields scr_postgres, fewer 50 fields can specified fields src_sqlite, minimise use time-costly json_tree workaround path collisions MongoDB acceleration docdb_query() factored common code expanded testing updated docs","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-098","dir":"Changelog","previous_headings":"","what":"nodbi 0.9.8","title":"nodbi 0.9.8","text":"CRAN release: 2023-09-23","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fixes-0-9-8","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nodbi 0.9.8","text":"escaping newline character within JSON value, docdb_*() functions","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-097","dir":"Changelog","previous_headings":"","what":"nodbi 0.9.7","title":"nodbi 0.9.7","text":"CRAN release: 2023-09-17","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"changes-0-9-7","dir":"Changelog","previous_headings":"","what":"Changes","title":"nodbi 0.9.7","text":"changed docdb_update() directly use NDJSON file duckdb cleaned unnecessary code docdb_create() using transactions src_duckdb()","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fixes-0-9-7","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nodbi 0.9.7","text":"regression error specifying top-level jq script corrected improve field selection docdb_query() corrected test exceptions mongodb, updated GitHub Actions, expanded tests","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-096","dir":"Changelog","previous_headings":"","what":"nodbi 0.9.6","title":"nodbi 0.9.6","text":"CRAN release: 2023-08-07","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fixes-0-9-6","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nodbi 0.9.6","text":"corrected marginal case docdb_query.src_duckdb() corrected minimum R version replaced tests httpbin webfakes removed explicit UTF-8 encoding reference speed docdb_query() switched v2 GitHub r-lib/action R CMD check","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-095","dir":"Changelog","previous_headings":"","what":"nodbi 0.9.5","title":"nodbi 0.9.5","text":"CRAN release: 2023-05-26","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"changes-0-9-5","dir":"Changelog","previous_headings":"","what":"Changes","title":"nodbi 0.9.5","text":"replaced dependency, gained speed","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-094","dir":"Changelog","previous_headings":"","what":"nodbi 0.9.4","title":"nodbi 0.9.4","text":"CRAN release: 2023-05-14","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fixes-0-9-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nodbi 0.9.4","text":"fix initialisation docdb_query() src_duckdb()","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-093","dir":"Changelog","previous_headings":"","what":"nodbi 0.9.3","title":"nodbi 0.9.3","text":"CRAN release: 2023-04-23","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"changes-0-9-3","dir":"Changelog","previous_headings":"","what":"Changes","title":"nodbi 0.9.3","text":"docdb_update() now can bulk updates _id’s value (SQLite, DuckDB, PostgreSQL, MongoDB; yet CouchDB Elastic)","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fixes-0-9-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nodbi 0.9.3","text":"fix tests value parameter file url","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-092","dir":"Changelog","previous_headings":"","what":"nodbi 0.9.2","title":"nodbi 0.9.2","text":"CRAN release: 2023-03-26","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fixes-0-9-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nodbi 0.9.2","text":"src_duckdb() handles json_type returns NULL non-existing path src_sqlite() handles text includes double quotation marks","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"changes-0-9-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"nodbi 0.9.2","text":"added warning DuckDB’s JSON extension available; improve instructions; see also issue #45 minor simplification docdb_exists() src_mongo(), docdb_query() SQL databases","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-091","dir":"Changelog","previous_headings":"","what":"nodbi 0.9.1","title":"nodbi 0.9.1","text":"CRAN release: 2022-11-20","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"changes-0-9-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"nodbi 0.9.1","text":"corrected closing connections SQL database backends upon session restart improved provisions parallel write access corresponding tests capture marginal case rows docdb_query()","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-090","dir":"Changelog","previous_headings":"","what":"nodbi 0.9.0","title":"nodbi 0.9.0","text":"CRAN release: 2022-10-31","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"changes-0-9-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"nodbi 0.9.0","text":"adding support duckdb (R package version 0.6.0 higher) database backend suppressed warnings checking string points file","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-081","dir":"Changelog","previous_headings":"","what":"nodbi 0.8.1","title":"nodbi 0.8.1","text":"CRAN release: 2022-07-01","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"changes-0-8-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"nodbi 0.8.1","text":"replaced isa() available R version 3.x","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-080","dir":"Changelog","previous_headings":"","what":"nodbi 0.8.0","title":"nodbi 0.8.0","text":"CRAN release: 2022-06-12","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"changes-0-8-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"nodbi 0.8.0","text":"refactored docdb_update.src_couchdb() use jqr adapted docdb_create accept jsonlite, jsonify, jqr JSON added details README testing (unset LANG, relocate open code, better cleaning )","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-071","dir":"Changelog","previous_headings":"","what":"nodbi 0.7.1","title":"nodbi 0.7.1","text":"CRAN release: 2022-05-04","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fixes-0-7-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nodbi 0.7.1","text":"fixed docdb_query() account change SQLite 3.38.3 adding quotation labels (closes issue #44), test added made docdb_query() work PostgreSQL string used $operator comma(s), test added","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-070","dir":"Changelog","previous_headings":"","what":"nodbi 0.7.0","title":"nodbi 0.7.0","text":"CRAN release: 2022-01-04","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"improvements-0-7-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"nodbi 0.7.0","text":"docdb_create() now supports file names http urls argument value importing data docdb_create() (thus docdb_update()) now supports quantifiers (e.g., ‘[-z]{2,3}’) regular expressions","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nodbi 0.7.0","text":"SQLite, return FALSE like backends using docdb_delete() non-existing container (table, case SQLite) better handle special characters encodings Windows","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-060","dir":"Changelog","previous_headings":"","what":"nodbi 0.6.0","title":"nodbi 0.6.0","text":"CRAN release: 2021-12-01","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"improvements-0-6-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"nodbi 0.6.0","text":"full support PostgreSQL (using jsonb)","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fixes-0-6-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nodbi 0.6.0","text":"SQLite add closing file references also exit","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-051","dir":"Changelog","previous_headings":"","what":"nodbi 0.5.1","title":"nodbi 0.5.1","text":"CRAN release: 2021-11-26","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fixes-0-5-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nodbi 0.5.1","text":"SQLite Windows ensure handling special characters (avoiding encoding conversions file operations stream / NDJSON)","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-050","dir":"Changelog","previous_headings":"","what":"nodbi 0.5.0","title":"nodbi 0.5.0","text":"CRAN release: 2021-11-21","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"improvements-0-5-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"nodbi 0.5.0","text":"identical API docdb_*() functions query fields parameters can used across database backends identical return values across database backends re-factored recently added functions RSQLite re-factored functions provide identical API performance (timing memory use) profiled optimised far possible testing now uses test file across databases currently, support redis (way found query update specific documents container) docdb_list() added function list container database","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"notes-0-5-0","dir":"Changelog","previous_headings":"","what":"Notes","title":"nodbi 0.5.0","text":"Support complex queries yet implemented Elasticsearch root fields (subitems) returned Elasticsearch CouchDB","code":""},{"path":[]},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"improvements-0-4-4","dir":"Changelog","previous_headings":"","what":"Improvements","title":"nodbi 0.4.4","text":"made remaining docdb_*() functions return logical indicating success function (docdb_create, docdb_delete), data frame (docdb_get, docdb_query), number documents affected function (docdb_update) change testing approach","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fixes-0-4-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nodbi 0.4.4","text":"docdb_get() return ’_id’ field src_{sqlite,mongo} since already used row names","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-043","dir":"Changelog","previous_headings":"","what":"nodbi 0.4.3","title":"nodbi 0.4.3","text":"CRAN release: 2021-07-23","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"improvements-0-4-3","dir":"Changelog","previous_headings":"","what":"Improvements","title":"nodbi 0.4.3","text":"docdb_query.src_sqlite() now handles JSON objects, returning nested lists (#40) src_sqlite() now uses transactions relevant functions (#39) docdb_update.src_mongo() now returns number upserted matched documents, irrespective whether updated ","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fixes-0-4-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nodbi 0.4.3","text":"docdb_get() return ’_id’ field src_{sqlite,mongo} since already used row names","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"other-0-4-3","dir":"Changelog","previous_headings":"","what":"Other","title":"nodbi 0.4.3","text":"change maintainer agreed","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-042","dir":"Changelog","previous_headings":"","what":"nodbi 0.4.2","title":"nodbi 0.4.2","text":"CRAN release: 2021-01-14","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"bug-fixes-0-4-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nodbi 0.4.2","text":"fix src_couchdb(): setting user password correctly internally, causing issues CouchDB v3 (#35) thanks @drtagkim pull request","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-040","dir":"Changelog","previous_headings":"","what":"nodbi 0.4.0","title":"nodbi 0.4.0","text":"CRAN release: 2019-11-11","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"nodbi 0.4.0","text":"docdb_query() docdb_get(), sqlite source, use connection instead regular file path avoid certain errors Windows (#33) work @rfhb docdb_query() docdb_create() sqlite source, fix handle mixed values different types (#34) work @rfhb Sys.sleep’s added Elasticserch eg’s make sure data available creation, data request","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-030","dir":"Changelog","previous_headings":"","what":"nodbi 0.3.0","title":"nodbi 0.3.0","text":"CRAN release: 2019-09-18","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"nodbi 0.3.0","text":"new author Ralf Herold, contribution new functions working SQLite/json1. new functions: src_sqlite, print.src_sqlite, docdb_create.src_sqlite, docdb_delete.src_sqlite, docdb_exists.src_sqlite, docdb_get.src_sqlite, docdb_query.src_sqlite, docdb_update.src_sqlite. includes new dataset contacts (#25) (#27) (#28) (#29) (#30) (#31) docdb_update gains method working MongoDB, via (#27)","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"nodbi 0.3.0","text":"added .github files source repository facilitate contributions src_mongo changes, improved behavior, via (#27)","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"defunct-0-3-0","dir":"Changelog","previous_headings":"","what":"Defunct","title":"nodbi 0.3.0","text":"etcd (via etseed package) integration removed package etcd doesn’t really fit main goal pkg. functions now defunct : src_etcd, docdb_create.src_etcd, docdb_delete.src_etcd, docdb_exists.src_etcd, docdb_get.src_etcd, print.src_etcd (#26)","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-020","dir":"Changelog","previous_headings":"","what":"nodbi 0.2.0","title":"nodbi 0.2.0","text":"CRAN release: 2019-04-13","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"nodbi 0.2.0","text":"docdb_get() gains limit parameter pagination, CouchDB, Elasticsearch MongoDB (#17) (#23) gains function docdb_query() send queries backend (#18) (#22) gains function docdb_exists() check database equivalent exists (#21) (#22)","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"nodbi 0.2.0","text":"Updated package new version elastic, slightly different setup connecting Elasticsearch instance (#20)","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"nodbi-010","dir":"Changelog","previous_headings":"","what":"nodbi 0.1.0","title":"nodbi 0.1.0","text":"CRAN release: 2018-08-01","code":""},{"path":"https://docs.ropensci.org/nodbi/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"nodbi 0.1.0","text":"released CRAN","code":""}]
